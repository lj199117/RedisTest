<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:task="http://www.springframework.org/schema/task" xmlns:jee="http://www.springframework.org/schema/jee"
	   xmlns:jms="http://www.springframework.org/schema/jms"
	   xmlns:util="http://www.springframework.org/schema/util"
	   xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	   xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
		">

	<context:property-placeholder location="
			classpath*:/conf/*.properties,
			classpath:app.properties" file-encoding="UTF-8"/>

	<context:component-scan base-package="com.redis">
		<context:exclude-filter type="regex" expression=".*Test"/>
		<context:exclude-filter type="regex" expression=".*\.mvc\..*"/>
	</context:component-scan>

	<!-- 启动对@Aspectj的支持 true为cglib，false为jdk代理，为true的话，会导致拦截不了mybatis的mapper-->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- redis配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.pool.maxTotal:200}"/>
		<property name="maxIdle" value="${redis.pool.maxIdle:10}"/>
		<property name="maxWaitMillis" value="${redis.pool.maxWaitMillis:1000}"/>
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow:true}"/>
	</bean>
	<!-- <bean id="jedisPool" class="redis.clients.jedis.JedisPool"
          destroy-method="close">
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"/>
        <constructor-arg name="host" value="${redis.host}"/>
        <constructor-arg name="port" value="${redis.port:6479}"/>
        <constructor-arg name="timeout" value="${redis.timeout:20}"/>
        <constructor-arg name="password" value="#{ '${redis.pwd:}'?:null }"/>
        <constructor-arg name="database" value="${redis.database:0}"/>
        <constructor-arg name="clientName" value="${server.appId}"/>
    </bean> -->
	<bean id="jedisPool" class="redis.clients.jedis.JedisSentinelPool" destroy-method="close">
		<constructor-arg name="poolConfig" ref="jedisPoolConfig"></constructor-arg>
		<constructor-arg name="masterName" value="${sentinel.masterName}"></constructor-arg>
		<constructor-arg name="sentinels" value="#{ T(com.redis.cache.Utils).asSet('${sentinel.servers}') }"></constructor-arg>
		<constructor-arg name="connectionTimeout" value="${sentinel.connectionTimeout:5000}"/>
		<constructor-arg name="soTimeout" value="${sentinel.soTimeout:5000}"/>
		<constructor-arg name="password" value="#{ '${sentinel.pwd:}'?:null }"/>
		<constructor-arg name="database" value="${sentinel.database:1}"/>
		<constructor-arg name="clientName" value="${server.appId}"/>
	</bean>
	<bean class="com.redis.cache.RedisCache"/>
	<!-- /redis配置 -->
</beans>
